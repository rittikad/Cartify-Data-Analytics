# -*- coding: utf-8 -*-
"""cartify_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hKeP7UpxNX0g-4pTmEukpP3JG0sz1AK3
"""

import sqlite3

# Step 1: Create SQLite Database
# Establish a connection to the database file (or create it if itdoesn't exist)
conn = sqlite3.connect('Cartify.db')
cursor = conn.cursor()

# Customer Table
cursor.execute('''
CREATE TABLE customer_table (
customer_id TEXT PRIMARY KEY,
first_name TEXT NOT NULL,
last_name TEXT NOT NULL,
gender TEXT NOT NULL,
date_of_birth DATE NOT NULL,
email TEXT UNIQUE NOT NULL,
phone_number INTEGER UNIQUE NOT NULL,
address TEXT NOT NULL,
city_id TEXT NOT NULL,
postcode TEXT NOT NULL,
country_id TEXT NOT NULL,
FOREIGN KEY (city_id) REFERENCES city_table(city_id) ON DELETE
CASCADE
FOREIGN KEY (country_id) REFERENCES country_table(country_id) ON
DELETE CASCADE
);
''')

# Orders Table
cursor.execute('''
CREATE TABLE orders_table (
order_id TEXT PRIMARY KEY,
customer_id TEXT NOT NULL,
order_date DATE NOT NULL,
discount_id INTEGER,
amount REAL NOT NULL,
FOREIGN KEY (customer_id) REFERENCES customer_table(customer_id)
ON DELETE CASCADE,
FOREIGN KEY (discount_id) REFERENCES discount_table(discount_id)
ON DELETE CASCADE
);
''')

# Order Details Table
cursor.execute('''
CREATE TABLE order_details_table (
order_id TEXT,
product_id TEXT,
quantity INTEGER NOT NULL,
PRIMARY KEY (order_id, product_id),
FOREIGN KEY (order_id) REFERENCES orders_table(order_id) ON DELETE
CASCADE,
FOREIGN KEY (product_id) REFERENCES products_table(product_id) ON
DELETE CASCADE
);
''')

# Products Table
cursor.execute('''
CREATE TABLE products_table (
product_id TEXT PRIMARY KEY,
product_name TEXT NOT NULL,
selling_price REAL NOT NULL,
category_id TEXT NOT NULL,
cost_price REAL NOT NULL,
stock INTEGER NOT NULL,
FOREIGN KEY (category_id) REFERENCES category_table(category_id)
ON DELETE CASCADE
);
''')

# Product Review Table
cursor.execute('''
CREATE TABLE product_review_table (
review_id INTEGER PRIMARY KEY AUTOINCREMENT,
customer_id TEXT NOT NULL,
product_id TEXT NOT NULL,
rating INTEGER CHECK (rating BETWEEN 1 AND 5) NOT NULL,
date DATE NOT NULL,
FOREIGN KEY (customer_id) REFERENCES customer_table(customer_id)
ON DELETE CASCADE,
FOREIGN KEY (product_id) REFERENCES products_table(product_id) ON
DELETE CASCADE
);
''')

# Category Table
cursor.execute('''
CREATE TABLE category_table (
category_id TEXT PRIMARY KEY,
category_name TEXT UNIQUE NOT NULL
);
''')

# Website Activity Table
cursor.execute('''
CREATE TABLE website_activity_table (
activity_id TEXT PRIMARY KEY,
category_id TEXT NOT NULL,
date DATE NOT NULL,
time TIME NOT NULL,
customer_id TEXT NOT NULL,
time_spent REAL NOT NULL,
order_placed TEXT CHECK (order_placed IN ('Y', 'N')) NOT NULL,
FOREIGN KEY (customer_id) REFERENCES customer_table(customer_id)
ON DELETE CASCADE,
FOREIGN KEY (category_id) REFERENCES category_table(category_id)
ON DELETE CASCADE
);
''')

# Discount Table
cursor.execute('''
CREATE TABLE discount_table (
discount_id INTEGER PRIMARY KEY AUTOINCREMENT,
campaign_id INTEGER NOT NULL,
discount_type_id TEXT NOT NULL,
coupon_code TEXT UNIQUE NOT NULL,
FOREIGN KEY (discount_type_id) REFERENCES
discount_type_table(discount_type_id) ON DELETE CASCADE,
FOREIGN KEY (campaign_id) REFERENCES
campaign_engagement_table(campaign_id) ON DELETE CASCADE
);
''')

# Discount Type Table
cursor.execute('''
CREATE TABLE discount_type_table (
discount_type_id TEXT PRIMARY KEY,
type_of_discount TEXT UNIQUE NOT NULL
);
''')

# Campaign Type Table
cursor.execute('''
CREATE TABLE campaign_type_table (
campaign_type_id INTEGER PRIMARY KEY AUTOINCREMENT,
platform TEXT UNIQUE NOT NULL
);
''')

# Marketing Campaigns Table
cursor.execute('''
CREATE TABLE marketing_campaigns_table (
campaign_id INTEGER NOT NULL,
city_id TEXT NOT NULL,
campaign_type_id INTEGER NOT NULL,
start_date DATE NOT NULL,
end_date DATE NOT NULL,
cost REAL NOT NULL,
PRIMARY KEY (campaign_id, city_id),
FOREIGN KEY (campaign_type_id) REFERENCES
campaign_type_table(campaign_type_id) ON DELETE CASCADE,
FOREIGN KEY (city_id) REFERENCES city_table(city_id) ON DELETE
CASCADE
);
''')

# Campaign Engagement Table
cursor.execute('''
CREATE TABLE campaign_engagement_table (
campaign_id INTEGER PRIMARY KEY AUTOINCREMENT,
click_rate REAL NOT NULL,
reach INTEGER NOT NULL,
FOREIGN KEY (campaign_id) REFERENCES
marketing_campaigns_table(campaign_id) ON DELETE CASCADE
);
''')

# City Table
cursor.execute('''
CREATE TABLE city_table (
city_id TEXT PRIMARY KEY,
city TEXT UNIQUE NOT NULL,
region_id TEXT NOT NULL,
FOREIGN KEY (region_id) REFERENCES region_table(region_id) ON
DELETE CASCADE
);
''')

# Region Table
cursor.execute('''
CREATE TABLE region_table (
region_id TEXT PRIMARY KEY,
region TEXT UNIQUE NOT NULL
);
''')

# Country Table
cursor.execute('''
CREATE TABLE country_table (
country_id TEXT PRIMARY KEY,
country TEXT UNIQUE NOT NULL
);
''')

# Save the changes to the database
conn.commit()
print("Database and tables created successfully!")

# Step 2: Check Tables Creation
cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
tables = cursor.fetchall()
for table_name in tables:
    print(f"Table: {table_name[0]}")
    cursor.execute(f"PRAGMA table_info({table_name[0]});")
    columns = cursor.fetchall()
    for col in columns:
        print(f" Column: {col[1]}, Type: {col[2]}, NotNull: {col[3]}, DefaultVal: {col[4]}, PrimaryKey: {col[5]}")
    print("-" * 20)

# Step 3: Load CSV files into the database tables:
import csv
def import_csv_to_table(csv_file, table_name):
#opens the file aas read only 'r', doesn't allow the original csv to be changed.
    with open(csv_file, 'r', encoding='utf-8') as file:
        csv_reader = csv.reader(file, delimiter=';')
        next(csv_reader) # Skip header row if present
        for row in csv_reader:
#? creates a placeholder for each column in the CSV file.
# ['?','?','?'] - Join makes it a string so it can then be inserted.
# use of the '?' reduce risk of SQL injection
            placeholders = ', '.join(['?' for _ in row])
#Assumes that the CSV and table have the same structure (this could be an issue) Would have to specify column names if different.
            sql = f"INSERT INTO {table_name} VALUES ({placeholders})"
            cursor.execute(sql, row)
# Import data from CSV files into the relevant table - Student_Table goes into student table, the import_csv_to_table is the function, passing the two values across.
try:
    import_csv_to_table('customers.csv', 'customer_table')
    import_csv_to_table('orders.csv', 'orders_table')
    import_csv_to_table('orders_details.csv', 'order_details_table')
    import_csv_to_table('product_data.csv', 'products_table')
    import_csv_to_table('products_review.csv', 'product_review_table')
    import_csv_to_table('marketing_campaigns.csv', 'marketing_campaigns_table')
    import_csv_to_table('campaign_type.csv', 'campaign_type_table')
    import_csv_to_table('discount.csv', 'discount_table')
    import_csv_to_table('discount_types.csv', 'discount_type_table')
    import_csv_to_table('campaign_engagement.csv', 'campaign_engagement_table')
    import_csv_to_table('website_activity.csv', 'website_activity_table')
    import_csv_to_table('category_data.csv', 'category_table')
    import_csv_to_table('cities.csv', 'city_table')
    import_csv_to_table('region.csv', 'region_table')
    import_csv_to_table('country.csv', 'country_table')
    conn.commit()

    print("Data imported successfully!")
except Exception as e:
    print(f"An error occurred: {e}")
    conn.rollback() # Rollback changes if an error occurred

# Step 4: Checking if the data has been loaded
import pandas as pd
# Query each table and load into pandas DataFrames
customer_df = pd.read_sql_query("SELECT * FROM customer_table", conn)
orders_df = pd.read_sql_query("SELECT * FROM orders_table", conn)
order_details_df = pd.read_sql_query("SELECT * FROM order_details_table", conn)
products_df = pd.read_sql_query("SELECT * FROM products_table", conn)
product_review_df = pd.read_sql_query("SELECT * FROM product_review_table", conn)
marketing_campaigns_df = pd.read_sql_query("SELECT * FROM marketing_campaigns_table", conn)
campaign_type_df = pd.read_sql_query("SELECT * FROM campaign_type_table", conn)
discount_df = pd.read_sql_query("SELECT * FROM discount_table", conn)
discount_types_df = pd.read_sql_query("SELECT * FROM discount_type_table", conn)
campaign_engagement_df = pd.read_sql_query("SELECT * FROM campaign_engagement_table", conn)
website_activity_df = pd.read_sql_query("SELECT * FROM website_activity_table", conn)
category_df = pd.read_sql_query("SELECT * FROM category_table", conn)
city_df = pd.read_sql_query("SELECT * FROM city_table", conn)
region_df = pd.read_sql_query("SELECT * FROM region_table", conn)
country_df = pd.read_sql_query("SELECT * FROM country_table", conn)

# Show the first 5 lines of each DataFrame
print("Customer Table:")
print(customer_df.head(5))

print("\nOrders Table:")
print(orders_df.head(5))

print("\nOrder Details Table:")
print(order_details_df.head(5))

print("\nProducts Table:")
print(products_df.head(5))

print("\nProduct Review Table:")
print(product_review_df.head(5))

print("\nMarketing Campaigns Table:")
print(marketing_campaigns_df.head(5))

print("\nCampaign Type Table:")
print(campaign_type_df.head(5))

print("\nDiscount Table:")
print(discount_df.head(5))

print("\nDiscount Types Table:")
print(discount_types_df.head(5))

print("\nCampaign Engagement Table:")
print(campaign_engagement_df.head(5))

print("\nWebsite Activity Table:")
print(website_activity_df.head(5))

print("\nCategory Table:")
print(category_df.head(5))

print("\nCity Table:")
print(city_df.head(5))

print("\nRegion Table:")
print(region_df.head(5))

print("\nCountry Table:")
print(country_df.head(5))

#Extracting Business Insights
#1. Customer Retention Rate
Customer_Retention_df = pd.read_sql_query("""
WITH OrderCounts AS (
SELECT customer_id, COUNT(*) AS OrderCount
FROM orders_table
GROUP BY customer_id
)
SELECT
COUNT(DISTINCT c.customer_id) AS total_customers,
COUNT(DISTINCT CASE WHEN oc.OrderCount >= 2 THEN c.customer_id
END) AS repeating_customers,
ROUND(
CASE
WHEN COUNT(DISTINCT c.customer_id) = 0 THEN 0
ELSE (COUNT(DISTINCT CASE WHEN oc.OrderCount >= 2 THEN
c.customer_id END) * 100.0) / COUNT(DISTINCT c.customer_id)
END, 0
) || '%' AS RepeatCustomersPercentage
FROM customer_table c
LEFT JOIN OrderCounts oc
ON c.customer_id = oc.customer_id;
""", conn)
print(Customer_Retention_df)

#2. Order Abandonment Rate:
Order_Abandonment_Rate_df = pd.read_sql_query("""
SELECT
t.total_customers,
n.notbuying_customers,
ROUND(
CASE
WHEN t.total_customers = 0 THEN 0
ELSE (n.notbuying_customers * 100.0) / t.total_customers
END, 0
) || '%' AS order_abandonment_rate
FROM
(SELECT COUNT(order_placed) AS total_customers FROM
website_activity_table) AS t
JOIN
(SELECT COUNT(order_placed) AS notbuying_customers
FROM website_activity_table
WHERE order_placed = 'N') AS n;
""", conn)
print(Order_Abandonment_Rate_df)

#3. Average Order Count:
Avg_Order_Count_df = pd.read_sql_query("""
SELECT
ROUND(AVG(order_count), 2) AS avg_order_count
FROM (
SELECT
customer_id,
COUNT(DISTINCT order_id) AS order_count
FROM orders_table
GROUP BY customer_id
) AS OrderCounts;
""", conn)
print(Avg_Order_Count_df)

#4. Average campaign ROI
Company_ROI_df = pd.read_sql_query("""
SELECT
ROUND(
CASE
WHEN cc.total_marketing_cost = 0 THEN 0
ELSE ((cp.total_profit - cc.total_marketing_cost) /
NULLIF(cc.total_marketing_cost, 0)) * 100
END, 2
) || '%' AS Company_ROI
FROM
(SELECT SUM((p.selling_price - p.cost_price) * od.quantity) AS
total_profit
FROM orders_table o
JOIN order_details_table od
ON o.order_id = od.order_id
JOIN products_table p
ON od.product_id = p.product_id
WHERE o.order_date >= '2024-08-01'
) AS cp
JOIN
(SELECT SUM(cost) AS total_marketing_cost FROM
marketing_campaigns_table) AS cc;
""", conn)
print(Company_ROI_df)

#5. Average Revenue Generated per Campaign:
Avg_Revenue_Per_Campaign_df = pd.read_sql_query("""
SELECT
CASE
WHEN tc.total_campaign = 0 THEN 0
ELSE ROUND(tr.total_revenue / NULLIF(tc.total_campaign, 0), 2)
END AS Avg_Revenue_Per_Campaign
FROM
(SELECT SUM(amount) AS total_revenue
FROM orders_table
WHERE order_date >= '2024-08-01'
) AS tr
JOIN
(SELECT COUNT(campaign_id) AS total_campaign
FROM campaign_engagement_table
) AS tc;
""", conn)
print(Avg_Revenue_Per_Campaign_df)

#6. Cost per Click
Cost_Per_Click_df = pd.read_sql_query("""
SELECT
ROUND(AVG(cost_per_campaign.cost_per_click), 2) AS cost_per_click
FROM (
SELECT
cc.campaign_id,
cc.total_cost,
COALESCE(c.total_clicks, 0) AS total_clicks,
CASE
WHEN COALESCE(c.total_clicks, 0) = 0 THEN 0
ELSE ROUND(cc.total_cost / NULLIF(c.total_clicks, 0), 2)
END AS cost_per_click
FROM (
SELECT campaign_id, SUM(cost) AS total_cost
FROM marketing_campaigns_table
GROUP BY campaign_id
) AS cc
LEFT JOIN (
SELECT campaign_id, SUM(click_rate * reach / 100.0) AS
total_clicks
FROM campaign_engagement_table
GROUP BY campaign_id
) AS c
ON cc.campaign_id = c.campaign_id
) AS cost_per_campaign;
""", conn)
print(Cost_Per_Click_df)

#7. Sales across months (with and without discount
import pandas as pd
# 1. Orders Discount Used DataFrame:
Orders_Discount_Used_df = pd.read_sql_query("""
SELECT
order_id,
order_date,
amount,
CASE
WHEN discount_id IS NULL OR discount_id = '' THEN 'N'
ELSE 'Y'
END AS discount_used
FROM orders_table;
""", conn)
# 2. Monthly Amount by Discount Usage DataFrame:
Monthly_Amount_by_Discount_df = pd.read_sql_query("""
SELECT
strftime('%Y-%m', order_date) AS Month,
SUM(CASE WHEN discount_id IS NOT NULL AND discount_id <> '' THEN
amount ELSE 0 END) AS Discount_Used_Amount,
SUM(CASE WHEN discount_id IS NULL OR discount_id = '' THEN amount
ELSE 0 END) AS Discount_Not_Used_Amount
FROM orders_table
GROUP BY strftime('%Y-%m', order_date)
ORDER BY Month;
""", conn)

print(Monthly_Amount_by_Discount_df)

#8. ROI per Camapign
import pandas as pd

# 1. Product Profit DataFrame: Calculate profit per product
Product_Profit_df = pd.read_sql_query("""
SELECT
product_id,
product_name,
selling_price,
cost_price,
(selling_price - cost_price) AS profit
FROM products_table;
""", conn)

# 2. Total Profit DataFrame: Calculate profit per order detail record
Total_Profit_df = pd.read_sql_query("""
SELECT
od.product_id,
od.quantity,
p.product_name,
p.selling_price,
p.cost_price,
((p.selling_price - p.cost_price) * od.quantity) AS total_profit
FROM order_details_table AS od
JOIN products_table AS p
ON od.product_id = p.product_id;
""", conn)

# 3. Order Total Profit DataFrame: Aggregate total profit per order
Order_Total_Profit_df = pd.read_sql_query("""
SELECT
o.order_id,
SUM((p.selling_price - p.cost_price) * od.quantity) AS
total_profit
FROM orders_table AS o
JOIN order_details_table AS od
ON o.order_id = od.order_id
JOIN products_table AS p
ON od.product_id = p.product_id
GROUP BY o.order_id;
""", conn)

# 4. Campaign ROI DataFrame:
# For orders on or after 2024-08-01, compute per campaign:
# - Sum total_profit (aggregated via discount_table)
# - Sum marketing_cost from marketing_campaigns_table
# - Compute Campaign_ROI_percentage as a percentage value rounded to 2 decimals with a "%" sign.
Campaign_ROI_df = pd.read_sql_query("""
WITH order_profit AS (
SELECT
o.order_id,
o.discount_id,
SUM((p.selling_price - p.cost_price) * od.quantity) AS
total_profit
FROM orders_table o
JOIN order_details_table od
ON o.order_id = od.order_id
JOIN products_table p
ON od.product_id = p.product_id
WHERE o.order_date >= '2024-08-01'
GROUP BY o.order_id, o.discount_id
),
profit_per_campaign AS (
SELECT
d.campaign_id,
SUM(op.total_profit) AS total_profit
FROM order_profit op
JOIN discount_table d
ON op.discount_id = d.discount_id
GROUP BY d.campaign_id
),
cost_per_campaign AS (
SELECT
campaign_id,
SUM(cost) AS total_marketing_cost
FROM marketing_campaigns_table
GROUP BY campaign_id
)
SELECT
p.campaign_id,
c.total_marketing_cost,
p.total_profit,
ROUND(((p.total_profit - c.total_marketing_cost) /
c.total_marketing_cost) * 100, 2) || '%' AS Campaign_ROI
FROM profit_per_campaign p
JOIN cost_per_campaign c
ON p.campaign_id = c.campaign_id;
""", conn)

print(Campaign_ROI_df)

#9. Marketing Reach vs Cost for Different Campaign
Campaign_Cost_Reach_df = pd.read_sql_query("""
SELECT
c.campaign_id,
c.total_cost,
COALESCE(r.total_reach, 0) AS total_reach
FROM
(SELECT campaign_id, SUM(cost) AS total_cost
FROM marketing_campaigns_table
GROUP BY campaign_id
) AS c
LEFT JOIN
(SELECT campaign_id, SUM(reach) AS total_reach
FROM campaign_engagement_table
GROUP BY campaign_id
) AS r
ON c.campaign_id = r.campaign_id;
""", conn)

print(Campaign_Cost_Reach_df)

#10. Profit per Category
Profit_per_Category_df = pd.read_sql_query("""
SELECT
c.category_id,
c.category_name,
ROUND(SUM((p.selling_price - p.cost_price) * od.quantity), 2) AS
total_profit
FROM orders_table o
JOIN order_details_table od
ON o.order_id = od.order_id
JOIN products_table p
ON od.product_id = p.product_id
JOIN category_table c
ON p.category_id = c.category_id
GROUP BY c.category_id, c.category_name
ORDER BY total_profit DESC;
""", conn)
print(Profit_per_Category_df)

#11. Revenue Per Campaign
Revenue_per_Campaign_df = pd.read_sql_query("""
SELECT
c.campaign_id,
ROUND(SUM(o.amount), 2) AS total_revenue
FROM orders_table o
JOIN discount_table d
ON o.discount_id = d.discount_id
JOIN campaign_engagement_table c
ON d.campaign_id = c.campaign_id
GROUP BY c.campaign_id
ORDER BY total_revenue DESC;
""", conn)

print(Revenue_per_Campaign_df)

#12. Discount Effectiveness
Discount_effective_df = pd.read_sql_query("""
SELECT
dtt.type_of_discount, -- Select type_of_discount from discount_type_table
COUNT(ot.order_id) AS total_orders,
SUM(ot.amount) AS total_revenue -- Assuming 'amount' column in orders_table represents total amount
FROM orders_table ot -- Alias orders_table as ot
JOIN discount_table dt ON ot.discount_id = dt.discount_id -- Join with discount_table using discount_id
JOIN discount_type_table dtt ON dt.discount_type_id =
dtt.discount_type_id --Join with discount type table
WHERE ot.order_date >= '1/08/24'
GROUP BY dtt.type_of_discount -- Group by type_of_discount
ORDER BY total_revenue DESC;
""", conn)

print(Discount_effective_df)

#13. Revenue per City
Revenue_Per_City_df = pd.read_sql_query("""
SELECT
c.city_id,
ct.city,
ROUND(SUM(o.amount), 2) AS total_revenue
FROM orders_table o
JOIN customer_table c
ON o.customer_id = c.customer_id
JOIN city_table ct
ON c.city_id = ct.city_id
GROUP BY c.city_id, ct.city
ORDER BY total_revenue DESC;
""", conn)
print(Revenue_Per_City_df)